// <auto-generated />
using System;
using MaternityCare_Backend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaternityCare_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250223143300_AddIndexUserAppointmentLike")]
    partial class AddIndexUserAppointmentLike
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LamVietTrung.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 236, DateTimeKind.Local).AddTicks(5896),
                            Email = "lamviettrung@gmail.com",
                            FullName = "Lam Viet Trung",
                            IsDeleted = false,
                            PhoneNumber = "0457009809",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 5.0
                        },
                        new
                        {
                            Id = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LeThiMinhHong.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 236, DateTimeKind.Local).AddTicks(5913),
                            Email = "lethiminhhong@gmail.com",
                            FullName = "Le Thi Minh Hong",
                            IsDeleted = false,
                            PhoneNumber = "0862605697",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 3.0
                        },
                        new
                        {
                            Id = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/NguyenThiThuHa.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 236, DateTimeKind.Local).AddTicks(5915),
                            Email = "nguyenthithuha@gmail.com",
                            FullName = "Nguyen Thi Thu Ha",
                            IsDeleted = false,
                            PhoneNumber = "0137746881",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 7.0
                        },
                        new
                        {
                            Id = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/VoDucHieu.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 236, DateTimeKind.Local).AddTicks(5918),
                            Email = "voduchieu@gmail.com",
                            FullName = "Vo Duc Hieu",
                            IsDeleted = false,
                            PhoneNumber = "0754559328",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 8.0
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ConceptionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fetuses");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<double?>("AmnioticFluidLevel")
                        .HasColumnType("float");

                    b.Property<double?>("BiparietalDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("CrownRumpLength")
                        .HasColumnType("float");

                    b.Property<double?>("EstimatedFetalWeight")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnType("float");

                    b.Property<Guid>("FetusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("GestationalSacDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FetusId");

                    b.ToTable("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BlogId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("595a4777-de2b-4c8a-a45f-3ddba55dddee"),
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 237, DateTimeKind.Local).AddTicks(7840),
                            Duration = 10.0,
                            Feature = "Like and comment blogs;Update fetus health record",
                            IsDeleted = false,
                            Price = 0.0,
                            Type = "Free"
                        },
                        new
                        {
                            Id = new Guid("e401f557-307a-4b1d-b65b-d7c26f3aac61"),
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 237, DateTimeKind.Local).AddTicks(7847),
                            Duration = 10.0,
                            Feature = "All the free features;Generate chart;Book doctor in advance",
                            IsDeleted = false,
                            Price = 200000.0,
                            Type = "Premium"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reminders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddc74737-e169-46d7-9d06-684d3f790165"),
                            Description = "You should have your first prenatal visit and have an ultrasound or blood tests to confirm the pregnancy.",
                            Week = 5
                        },
                        new
                        {
                            Id = new Guid("16e37a3e-affc-40f7-b34a-45745fe8875e"),
                            Description = "You should have your first-trimester screening to check for chromosomal conditions.",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("e5118672-edd4-426f-a514-1bd7cc02d7bc"),
                            Description = "This is the beginning of the second trimester. A routine check-up is a must to check if the pregnancy is progressing normally",
                            Week = 13
                        },
                        new
                        {
                            Id = new Guid("52db8010-ab95-4dba-b348-006eeac83031"),
                            Description = "You should have an anomaly scan to examine fetal anatomy.",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("f35c1e59-36b6-4f10-b604-3d72c01b13cb"),
                            Description = "You should have the mid-pregnancy ultrasound to check the baby’s development.",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("30511e3a-1628-47ae-bfa8-d3095963ee97"),
                            Description = "This is the beginning of the third trimester. You should have schedule for additional tests or screenings (such as for anemia or gestational diabetes)",
                            Week = 25
                        },
                        new
                        {
                            Id = new Guid("515cfda8-808e-43f2-bb9e-d3d640db1102"),
                            Description = "From now on, you have schedule an appointment with your doctor once a week to make sure the baby is developing weel.",
                            Week = 31
                        },
                        new
                        {
                            Id = new Guid("c5e8b700-662e-4289-af0f-f05a61385542"),
                            Description = "You’re now considered early term. You should have regular monitoring.",
                            Week = 37
                        },
                        new
                        {
                            Id = new Guid("456f3e10-e3aa-486c-8364-34ee89ff8a3c"),
                            Description = "You’re now considered full term. You should attend all scheduled prenatal appointments and contact your provider if you experience any changes or discomfort.",
                            Week = 39
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("416b6528-8c94-4ddc-8413-012b8ee38ae4"),
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0a642ac-7d32-4f9a-b17c-e7e96d9c935e"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("223bc431-1313-4c24-9936-94035418637f"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("0c1789b5-fe54-48ab-9f38-428dac26c6a7"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("efd90989-ed81-4641-a229-c03b9df0d0a1"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("576aff08-8232-441b-ad97-11df8fe34ace"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2ed0a1b9-e534-49dc-ad2c-8ab9fab9ffcd"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("df0a88d2-dcfb-43ae-a48d-676649d89452"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("135b64cb-5b93-4603-8faf-3e4d8e260b8f"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("60acc408-7dfb-4238-8ae9-aff90597d4dd"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("53f6e427-fa64-4732-a35c-adfecd8404e1"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4179c515-40b7-47fb-b50a-e7d054aad4ab"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8b19646a-9ba1-43ba-b480-23b64e1dcd10"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("730f6b45-2376-4e7d-bdc0-12770cb57e15"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f6a98804-7a17-477c-b6a6-8c1cf0cdb8c5"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c63554f0-d08e-49ef-b385-595f09f90d18"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1b8ac11a-a5e0-4b86-9796-b5f4794c0aae"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("de878c51-4349-4140-a995-e984406b84ed"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("201a3ed8-f29a-47a1-a0c5-cc922cc11ede"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("55f158ba-9e28-4d68-9bec-605e4a658b55"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("313224dc-6e94-4556-9c12-d4313842c7a4"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b17e8b8c-da3f-49d6-be91-09fbc7a238ae"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("40816d3b-6063-49d6-8201-58bd6e4e837f"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("88529011-c0ca-4517-bc17-cb4ee2d02b80"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("12c7da94-6bd6-433c-ab17-990ae281d657"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("aa7e1171-26f4-4fb5-be5a-75d7084d0bd2"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7dc02093-20d8-46ba-b4d9-ddac62c2aee8"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("3308aba4-9cdc-425f-b8be-b821caf6f62c"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c6be18e5-40da-4f23-9b97-ffcf78776336"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("21e1e6c2-082e-43bb-a0ba-f6a6218845aa"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("843b46ba-13fa-45d2-af65-0b0e7b784b16"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("ac475d88-e665-435a-8645-d11eae70348f"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3fc84487-5da5-4a30-a522-1c799529cb6c"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("be4450d3-77c6-45a3-a487-35cb804176e7"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f5ec0f97-4116-4805-85ad-1760a0a5570c"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("80b939c1-c86a-4625-a518-0ea6faaff836"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c0816fb9-9417-452b-abf1-cb1c454f8d8a"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b84cc980-c628-4a28-b91a-9fca4a6b7693"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f42cba56-167f-4bba-8801-a65dce513ed7"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("963f9026-38a2-4423-bb1a-ed3aae89916e"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9eb7bd85-26e5-4ed7-bd0b-7d0091646ee3"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("46d939b0-688c-447c-b296-c4f9e5bf8c23"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5cdf273f-65af-4dcc-a030-661c25bf0ea5"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("89703ec0-d1b9-41bc-853c-420d247a3725"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("24b8b0b8-4215-468b-8c3c-36c9c515f8b7"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("38b2e766-6930-4388-bd8a-5a30b873c0b2"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f6620079-daa8-4fcf-a0bd-5cb1868a06b6"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("43946414-c799-49ca-95f9-5be591b88cd7"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("0afa0287-7b05-42e5-8013-c8c4cc6ebf00"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("0bad717f-3be7-49de-b991-2f78fcbf349b"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("26386b71-bbad-4fe1-96e8-75f7743575fe"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("12b8a4c9-4b49-48fa-908a-63cf85f3d0ba"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7b12c438-c6ab-4a38-88bc-2ec1d1b14424"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4229ae57-ede6-41de-984d-aa61804290aa"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("86120cec-f917-4f98-893c-d652da4f4491"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("cf88c464-bbb6-4832-a11e-588c45b7320a"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("efd736a3-1a32-47b0-a7f8-7eb078d7bf40"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("d4cc9e55-06bb-4058-8b57-96bcc34daf05"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("08a00526-b999-438f-897d-e4225f4189b2"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("43df7c8f-6b04-4243-8444-abda2b59956c"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("fcd02866-3cd2-49a5-80bc-f9c97ec7ddb5"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("fe66c66d-adee-41fc-a5cb-74344202ae2e"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("015f79b3-b427-4bd9-84ed-d5f997ee6893"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("f33813ae-fa97-4f6b-8c23-d95b92e94a19"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f6ff7d6e-cff9-428d-8455-1a6467970959"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.StandardFetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbdominalCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AmnioticFluidLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BiparietalDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CrownRumpLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EstimatedFetalWeight")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FemurLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GestationalSacDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HeadCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StandardFetusHealths");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c52b1276-8341-4e42-b6a8-e762aeff744b"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "4-9",
                            GestationalSacDiameter = "14-25",
                            Week = 6
                        },
                        new
                        {
                            Id = new Guid("f9a88432-9482-430f-9d87-266193a9546e"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "9-14",
                            GestationalSacDiameter = "18-30",
                            Week = 7
                        },
                        new
                        {
                            Id = new Guid("ba36d814-dc30-4f9a-88b9-9a1c2b2df74b"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "14-22",
                            GestationalSacDiameter = "25-35",
                            Week = 8
                        },
                        new
                        {
                            Id = new Guid("9c05e53a-33c9-469e-9566-dce591bbabb7"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "22-31",
                            GestationalSacDiameter = "28-36",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("649c1692-ca03-4988-92c0-dc0964a64b1e"),
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "15-22",
                            CrownRumpLength = "31-40",
                            EstimatedFetalWeight = "5-8",
                            FemurLength = "7-9",
                            GestationalSacDiameter = "30-40",
                            HeadCircumference = "56-78",
                            Week = 10
                        },
                        new
                        {
                            Id = new Guid("f25b9da7-bdfe-4de9-8169-f81bf80f816c"),
                            AbdominalCircumference = "50-65",
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "21-24",
                            CrownRumpLength = "50-60",
                            EstimatedFetalWeight = "14-19",
                            FemurLength = "9-12",
                            GestationalSacDiameter = "40-50",
                            HeadCircumference = "70-85",
                            Week = 12
                        },
                        new
                        {
                            Id = new Guid("bcf3e40a-0a2c-40c7-8b62-9312bbaf500a"),
                            AbdominalCircumference = "70-85",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "24-30",
                            CrownRumpLength = "78-85",
                            EstimatedFetalWeight = "40-60",
                            FemurLength = "14-17",
                            HeadCircumference = "90-110",
                            Week = 14
                        },
                        new
                        {
                            Id = new Guid("57df4a09-e052-4eac-af2b-de44c8b5fae0"),
                            AbdominalCircumference = "90-110",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "32-38",
                            EstimatedFetalWeight = "100-150",
                            FemurLength = "18-22",
                            HeadCircumference = "110-130",
                            Week = 16
                        },
                        new
                        {
                            Id = new Guid("a1420486-ca3d-4ca9-a74b-2717d5778247"),
                            AbdominalCircumference = "110-130",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "38-45",
                            EstimatedFetalWeight = "190-220",
                            FemurLength = "22-27",
                            HeadCircumference = "130-150",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("c2204904-ea12-4354-a4c4-dc58e866ef9a"),
                            AbdominalCircumference = "125-155",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "45-50",
                            EstimatedFetalWeight = "260-300",
                            FemurLength = "30-34",
                            HeadCircumference = "150-170",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("b39b7e7b-6161-4328-a6a4-06f37f41f948"),
                            AbdominalCircumference = "150-180",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "50-55",
                            EstimatedFetalWeight = "350-420",
                            FemurLength = "34-38",
                            HeadCircumference = "170-190",
                            Week = 22
                        },
                        new
                        {
                            Id = new Guid("d8740bed-5e78-42aa-a10c-1c36a7f5dcc9"),
                            AbdominalCircumference = "170-200",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "55-60",
                            EstimatedFetalWeight = "500-600",
                            FemurLength = "38-42",
                            HeadCircumference = "190-210",
                            Week = 24
                        },
                        new
                        {
                            Id = new Guid("475d0144-74f5-4005-9253-d82a7e27d833"),
                            AbdominalCircumference = "190-220",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "60-65",
                            EstimatedFetalWeight = "750-850",
                            FemurLength = "42-47",
                            HeadCircumference = "210-230",
                            Week = 26
                        },
                        new
                        {
                            Id = new Guid("1d358d3d-c98d-4370-bd1d-bb09263953cb"),
                            AbdominalCircumference = "210-250",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "65-70",
                            EstimatedFetalWeight = "1000-1200",
                            FemurLength = "47-52",
                            HeadCircumference = "230-250",
                            Week = 28
                        },
                        new
                        {
                            Id = new Guid("7be82c3c-181b-495f-9e63-0eee9c17cadb"),
                            AbdominalCircumference = "230-270",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "70-75",
                            EstimatedFetalWeight = "1400-1600",
                            FemurLength = "52-56",
                            HeadCircumference = "250-270",
                            Week = 30
                        },
                        new
                        {
                            Id = new Guid("ce0aeab6-2cd6-4f38-8fe9-52add5a68beb"),
                            AbdominalCircumference = "250-290",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "75-80",
                            EstimatedFetalWeight = "1700-2000",
                            FemurLength = "56-60",
                            HeadCircumference = "270-290",
                            Week = 32
                        },
                        new
                        {
                            Id = new Guid("5cb3ed62-202b-4482-a301-59fbab7f9107"),
                            AbdominalCircumference = "270-310",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "80-85",
                            EstimatedFetalWeight = "2100-2500",
                            FemurLength = "60-65",
                            HeadCircumference = "290-310",
                            Week = 34
                        },
                        new
                        {
                            Id = new Guid("3aac46f5-d8f0-40d3-8fec-85235596328d"),
                            AbdominalCircumference = "290-330",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "85-90",
                            EstimatedFetalWeight = "2500-2900",
                            FemurLength = "65-70",
                            HeadCircumference = "310-330",
                            Week = 36
                        },
                        new
                        {
                            Id = new Guid("b974c03a-2863-414c-8401-b952115c43cb"),
                            AbdominalCircumference = "310-350",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "90-95",
                            EstimatedFetalWeight = "2900-3200",
                            FemurLength = "70-75",
                            HeadCircumference = "330-350",
                            Week = 38
                        },
                        new
                        {
                            Id = new Guid("7f756825-06ef-46e1-be0d-b3b9fb36022d"),
                            AbdominalCircumference = "320-360",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "95-100",
                            EstimatedFetalWeight = "3200-3500",
                            FemurLength = "75-80",
                            HeadCircumference = "350-370",
                            Week = 40
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5aefed2-5df7-4d2f-bec4-7932da2849de"),
                            Name = "Baby"
                        },
                        new
                        {
                            Id = new Guid("d1a17f1e-eb54-43bc-bdac-ca1873c99362"),
                            Name = "Pregnancy"
                        },
                        new
                        {
                            Id = new Guid("05ac02ec-3fd0-47ad-ab14-4a969bec6e3d"),
                            Name = "Parenting"
                        },
                        new
                        {
                            Id = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("bc557eef-49f8-4bca-8f0a-9700b8c13e7e"),
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = new Guid("8e18a540-ce22-46d3-ba7b-cde9d20dca38"),
                            Name = "Exercise"
                        },
                        new
                        {
                            Id = new Guid("3185dbf9-c4be-4c0e-b8e6-4d9ee47bb296"),
                            Name = "Mental Health"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a0c434f-b4b8-4342-a991-b343f2b0ee3d"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            CCCD = "123456789012",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 0, 239, DateTimeKind.Local).AddTicks(5135),
                            DateOfBirth = new DateOnly(2002, 1, 23),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAEN/8zbAIvh8DTTLKNOIutVFDwMUZzQKmykz5xlaLHc+FnemQR7MZ7St6Hxcbi3sTuQ==",
                            RoleId = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Slot", "Slot")
                        .WithOne("Appointment")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Appointment", "SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Tag", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Fetus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Fetus", "Fetus")
                        .WithMany("FetusHealths")
                        .HasForeignKey("FetusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fetus");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Slots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Subscription", "Subscription")
                        .WithOne("Transaction")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Transaction", "SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Navigation("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Fetus");

                    b.Navigation("Likes");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
