// <auto-generated />
using System;
using MaternityCare_Backend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaternityCare_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("525be099-6b93-4889-9384-e986fcd8595a"),
                            Content = "Tôi sẽ bước sang tuần thứ 26 vào đúng ngày mai nhưng tôi đã bắt đầu cho con bú có lẽ là 3 tuần trước. Lúc đầu chỉ là những đốm nhỏ nhưng giờ tôi thức dậy với cả hai núm vú ướt đẫm áo. Bác sĩ sản phụ khoa của tôi nói rằng đừng lo lắng nhưng tôi muốn hiểu tại sao lại sớm như vậy. Bạn có ý tưởng nào không?",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 49, DateTimeKind.Local).AddTicks(6961),
                            IsActive = true,
                            TagId = new Guid("d1a17f1e-eb54-43bc-bdac-ca1873c99362"),
                            Title = "26 tuần cho con bú",
                            UserId = new Guid("12c1b9d8-dd0d-4edf-8aec-dbcf8d0aca16")
                        },
                        new
                        {
                            Id = new Guid("d53abcd4-5ad4-42cd-b5ac-c00bdbd5191c"),
                            Content = "Tôi đạt đỉnh rụng trứng vào ngày 8 và BD hai lần một ngày trong suốt tháng. Ngày hôm sau, tôi bị đau núm vú cứng và siêu mềm. (Tôi biết là bình thường sau khi rụng trứng) kể từ đó ngực tôi bị đau và núm vú của tôi cũng đau như vậy. Tôi không bắt đầu kỳ kinh nguyệt cho đến ngày 23 và tôi thường có PMS 5 ngày trước đó. Có thể đó là một triệu chứng không? \r\n-tôi đã uống vitamin và ăn uống lành mạnh nhất có thể trong khi cũng tránh xa caffeine",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 49, DateTimeKind.Local).AddTicks(6977),
                            IsActive = true,
                            TagId = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Title = "Đây có thể là dấu hiệu của việc mang thai sớm?",
                            UserId = new Guid("12c1b9d8-dd0d-4edf-8aec-dbcf8d0aca16")
                        },
                        new
                        {
                            Id = new Guid("8081a98b-ec3a-4bd2-965d-063617722541"),
                            Content = "Đỉnh điểm của tôi là vào ngày 18 tháng 2 và tôi rụng trứng vào ngày 19. Kỳ kinh của tôi được cho là bắt đầu vào ngày 1 tháng này. Hôm nay là ngày 4 tháng 3 và tôi vẫn chưa có kinh. Tuy nhiên, tôi bị ra máu nâu khi đi tiểu và lau, nhưng không phải lúc nào cũng vậy. Tôi đã thử thai vào sáng nay và kết quả là âm tính. Nhiệt độ cơ thể của tôi là 98°F kể từ ngày 28. Tôi bị ra dịch trắng vào ngày 2 và ngày 3. Tôi bắt đầu ra máu nâu vào buổi sáng",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 49, DateTimeKind.Local).AddTicks(6980),
                            IsActive = true,
                            TagId = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Title = "Đây có thể là chảy máu do cấy ghép tử cung? Có ai gặp phải chu kỳ tương tự không?",
                            UserId = new Guid("12c1b9d8-dd0d-4edf-8aec-dbcf8d0aca16")
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LamVietTrung.jpg",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 50, DateTimeKind.Local).AddTicks(1760),
                            Email = "lamviettrung@gmail.com",
                            FullName = "Lam Viet Trung",
                            IsDeleted = false,
                            PhoneNumber = "0457009809",
                            Specialization = "Bác sĩ sản khoa",
                            YearsOfExperience = 5.0
                        },
                        new
                        {
                            Id = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LeThiMinhHong.jpg",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 50, DateTimeKind.Local).AddTicks(1778),
                            Email = "lethiminhhong@gmail.com",
                            FullName = "Le Thi Minh Hong",
                            IsDeleted = false,
                            PhoneNumber = "0862605697",
                            Specialization = "Bác sĩ sản khoa",
                            YearsOfExperience = 3.0
                        },
                        new
                        {
                            Id = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/NguyenThiThuHa.jpg",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 50, DateTimeKind.Local).AddTicks(1791),
                            Email = "nguyenthithuha@gmail.com",
                            FullName = "Nguyen Thi Thu Ha",
                            IsDeleted = false,
                            PhoneNumber = "0137746881",
                            Specialization = "Bác sĩ sản khoa",
                            YearsOfExperience = 7.0
                        },
                        new
                        {
                            Id = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/VoDucHieu.jpg",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 50, DateTimeKind.Local).AddTicks(1794),
                            Email = "voduchieu@gmail.com",
                            FullName = "Vo Duc Hieu",
                            IsDeleted = false,
                            PhoneNumber = "0754559328",
                            Specialization = "Bác sĩ sản khoa",
                            YearsOfExperience = 8.0
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ConceptionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fetuses", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<double?>("AmnioticFluidLevel")
                        .HasColumnType("float");

                    b.Property<double?>("BiparietalDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("CrownRumpLength")
                        .HasColumnType("float");

                    b.Property<double?>("EstimatedFetalWeight")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnType("float");

                    b.Property<Guid>("FetusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("GestationalSacDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FetusId", "Week")
                        .IsUnique();

                    b.ToTable("FetusHealths", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BlogId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Packages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("595a4777-de2b-4c8a-a45f-3ddba55dddee"),
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 51, DateTimeKind.Local).AddTicks(4561),
                            Duration = 0.0,
                            Feature = "Thích và bình luận các bài đăng",
                            IsDeleted = false,
                            Price = 0.0,
                            Type = "Miễn phí"
                        },
                        new
                        {
                            Id = new Guid("e401f557-307a-4b1d-b65b-d7c26f3aac61"),
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 51, DateTimeKind.Local).AddTicks(4568),
                            Duration = 10.0,
                            Feature = "Tất cả chức năng của miễn phí;Tạo biểu đồ;Đặt lịch hẹn với bác sĩ;Thêm nhận xét về trang",
                            IsDeleted = false,
                            Price = 200000.0,
                            Type = "Premium"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reminders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d7fdfc8-ed07-4988-8cc4-5507b7c858b5"),
                            Description = "Bạn nên đi khám thai lần đầu và siêu âm hoặc xét nghiệm máu để xác nhận tình trạng mang thai.",
                            Week = 5
                        },
                        new
                        {
                            Id = new Guid("f4bcc0db-020c-4bb6-8816-cb92cd83317d"),
                            Description = "Bạn nên sàng lọc trong tam cá nguyệt đầu tiên để kiểm tra tình trạng nhiễm sắc thể.",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("f9e15e4e-21c4-4960-af24-aa3f704477aa"),
                            Description = "Đây là thời điểm bắt đầu của tam cá nguyệt thứ hai. Kiểm tra sức khỏe định kỳ là điều cần thiết để kiểm tra xem thai kỳ có tiến triển bình thường không",
                            Week = 13
                        },
                        new
                        {
                            Id = new Guid("93f7ab78-f6ad-4e74-901a-429fb17b0004"),
                            Description = "Bạn nên siêu âm dị tật để kiểm tra giải phẫu thai nhi.",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("c3321f2f-bed0-41de-830c-12b0937597f0"),
                            Description = "Bạn nên siêu âm vào giữa thai kỳ để kiểm tra sự phát triển của thai nhi.",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("33b96902-9c3b-43c8-ba15-f726443bda95"),
                            Description = "Đây là thời điểm bắt đầu của tam cá nguyệt thứ ba. Bạn nên có lịch trình xét nghiệm hoặc sàng lọc bổ sung (như thiếu máu hoặc tiểu đường thai kỳ)",
                            Week = 25
                        },
                        new
                        {
                            Id = new Guid("8f0af54a-28b1-4e3c-a4f5-d825f37de24c"),
                            Description = "Từ bây giờ, bạn phải lên lịch hẹn khám với bác sĩ một lần mỗi tuần để đảm bảo em bé phát triển khỏe mạnh.",
                            Week = 31
                        },
                        new
                        {
                            Id = new Guid("2b04b54f-a888-4870-a184-a4353448d812"),
                            Description = "Bây giờ bạn được coi là thai kỳ sớm. Bạn nên được theo dõi thường xuyên.",
                            Week = 37
                        },
                        new
                        {
                            Id = new Guid("34b1e18b-f8de-413f-8188-3371c95a8d4f"),
                            Description = "Bây giờ bạn được coi là đủ tháng. Bạn nên tham dự tất cả các cuộc hẹn khám thai theo lịch trình và liên hệ với bác sĩ nếu bạn gặp bất kỳ thay đổi hoặc khó chịu nào.",
                            Week = 39
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("416b6528-8c94-4ddc-8413-012b8ee38ae4"),
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Slots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("143c8a2c-ac0f-484c-94da-0252c915bf64"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("96fb8a44-785a-47df-b897-122bba6fd0ae"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("3c29859a-2822-4367-afb2-6c3e076fb000"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ad13cf7b-28d9-4eed-ba4a-6a4f40c7f17e"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("144e3813-f72a-4ffc-a193-92123ed498df"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("572bc21e-62d5-4005-b2bb-2afc7f179949"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c7774954-bdcc-4819-a9b2-c6457c0e5b0a"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("866112e6-a343-4a27-b50e-4477806ab3a8"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("f91da06e-c009-40c6-ba2c-4d273bbfc606"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8ecd922d-37bb-4431-a3d1-4015d2186430"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("33610a29-6f29-4aca-b47e-5a42ec0897cb"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3a7149b0-5462-42f7-96cc-351ae4af1f36"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("77017673-39b7-4ca9-9770-44b91605febb"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("cad37dc0-1c08-4795-893f-72c9333f3335"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("1e96008f-1684-4210-b525-57cdd5e38236"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("09515cc7-6df5-4da8-bef6-ef2b241448a3"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("304a9c56-ffd2-4c25-8578-ed1b5fea77a1"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("0c73033d-5f7e-4d14-b685-5079c72331aa"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("420e3107-39b2-40a8-9d53-132eaa40bf5d"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c71ff570-3503-4374-a716-1e2e7d39ee01"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b1db6b2f-00ad-4f23-91da-fbc54dbd3aea"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d6eae82d-0620-4b90-9dff-ff62945dbb89"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e53e5b9c-e8fa-4f11-bb9b-48a6fe8d9a61"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("0c5b8eea-162c-4117-b157-e30a1f450d9e"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("2b193085-5a66-45b8-8cf0-6d7b608da145"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("70022040-3cfc-4177-99bb-07e365902467"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("6395993b-fe8d-4447-a8ad-0b11557fbfff"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ddb20565-2b52-42fd-a60d-cf136c710d17"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("cf269ab6-f12f-4a95-9318-200c151588ca"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("046f0108-1082-4d34-a26c-34a2369eb158"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b90e2a11-441d-4238-8628-327fd92da117"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("15283308-24e0-4417-993e-7059eddebb9b"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("a971f955-2742-42fe-a1a4-5ab9eb63120f"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6bade1fd-0a1e-4fbf-9aa6-d16d758c02f6"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("6a36e996-e02e-407d-a0ae-a958b4a2478b"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("66a062c2-d005-4de3-946e-f2ad5fb4946c"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("dd33950f-d363-4804-9463-329edd2decf8"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("fcb1be71-e3b8-4302-8aa1-a5f68317d483"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e3d72e86-7d81-4c7a-8799-8ddd8a764a93"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e25426d6-5621-47f7-be14-97154e4d2022"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("cfc39fb6-3816-42ab-b76a-28a4043f262e"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("76fc645a-9d75-4281-86b9-a332a6ed6c94"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("bbea7c7d-23c1-44d4-93e9-dc8e550fcad3"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b2204502-05bc-4595-9e51-95eb142213b9"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("1f61207d-7fbf-44ba-8435-03110c0a2005"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("22b7f013-fe39-4a85-aedf-52f29ec71a43"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("d9e13efc-dd1c-4e57-b09c-07365525d73a"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1572a7cd-65f0-45dd-a1e2-0b9e6b772f11"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("afa1b54a-4a11-445a-a3e7-2aaddd652aae"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("56dfa871-d9ee-4de6-a60e-12af36cb4a30"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("ece91944-a6ce-49f9-aea0-21542bd806de"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6c0eeb9a-0771-457f-94a4-ff7c08feb741"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("cfdbe34e-f42a-48b6-87ab-0937ab8227fb"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e9365da9-7506-4ccb-b24b-22974f173187"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("2866a75e-1a60-4ccf-82c8-51c3416cebfe"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("36454aef-bf45-40e3-a97c-d10c6096eb5a"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("06d7fcdb-fd15-4ea6-bed4-a31204235799"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("45175c57-6e75-4fde-9871-749a88432479"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("2e436526-8e5d-498c-9c06-a0a5e635428e"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8ec654b6-2480-422b-a305-047aec5c77ae"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e1ccc00a-94b9-44d6-a840-c009663e8392"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("90c13672-f8ca-4f24-897d-141354db17f4"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("7163d5cf-dd74-49f7-9eba-16c13ac2c8ab"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ba8cf908-cc97-4cb2-b74d-d872626f1650"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.StandardFetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbdominalCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AmnioticFluidLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BiparietalDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CrownRumpLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EstimatedFetalWeight")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FemurLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GestationalSacDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HeadCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StandardFetusHealths", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6720ea86-a598-4fb3-b71b-333e776436c0"),
                            Week = 2
                        },
                        new
                        {
                            Id = new Guid("f9e5a9f6-4431-49ed-a73a-73d93247a0fe"),
                            Week = 3
                        },
                        new
                        {
                            Id = new Guid("6193bb60-567f-460c-b279-8b1007cd1822"),
                            Week = 4
                        },
                        new
                        {
                            Id = new Guid("39b530c8-6ae9-4dbb-84be-503535d475a6"),
                            Week = 5
                        },
                        new
                        {
                            Id = new Guid("13b3204f-ffb5-43f9-945d-0a2e385299d4"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "4-9",
                            GestationalSacDiameter = "14-25",
                            Week = 6
                        },
                        new
                        {
                            Id = new Guid("6de5cdfd-96f8-4ea4-9dc5-2a36753d1bff"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "9-14",
                            GestationalSacDiameter = "18-30",
                            Week = 7
                        },
                        new
                        {
                            Id = new Guid("11e46091-542a-4fd3-8181-f124de17e08f"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "14-22",
                            GestationalSacDiameter = "25-35",
                            Week = 8
                        },
                        new
                        {
                            Id = new Guid("51868f16-fef9-45c9-9db5-2bcc36d91ad8"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "22-31",
                            GestationalSacDiameter = "28-36",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("947adc36-7132-49d2-b619-10f5b7de9d1f"),
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "15-22",
                            CrownRumpLength = "31-40",
                            EstimatedFetalWeight = "5-8",
                            FemurLength = "7-9",
                            GestationalSacDiameter = "30-40",
                            HeadCircumference = "56-78",
                            Week = 10
                        },
                        new
                        {
                            Id = new Guid("2f8c02d5-7882-478e-a05d-fb715f788830"),
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "15-22",
                            CrownRumpLength = "31-40",
                            EstimatedFetalWeight = "5-8",
                            FemurLength = "7-9",
                            GestationalSacDiameter = "30-40",
                            HeadCircumference = "56-78",
                            Week = 11
                        },
                        new
                        {
                            Id = new Guid("f614faa3-a038-4074-855b-180fbcfe9a3a"),
                            AbdominalCircumference = "50-65",
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "21-24",
                            CrownRumpLength = "50-60",
                            EstimatedFetalWeight = "14-19",
                            FemurLength = "9-12",
                            GestationalSacDiameter = "40-50",
                            HeadCircumference = "70-85",
                            Week = 12
                        },
                        new
                        {
                            Id = new Guid("6d7a71a0-d891-4fc1-b58c-08e807423ebc"),
                            AbdominalCircumference = "50-65",
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "21-24",
                            CrownRumpLength = "50-60",
                            EstimatedFetalWeight = "14-19",
                            FemurLength = "9-12",
                            GestationalSacDiameter = "40-50",
                            HeadCircumference = "70-85",
                            Week = 13
                        },
                        new
                        {
                            Id = new Guid("fd62b6bb-4f75-4f20-a163-cac6362648f2"),
                            AbdominalCircumference = "70-85",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "24-30",
                            CrownRumpLength = "78-85",
                            EstimatedFetalWeight = "40-60",
                            FemurLength = "14-17",
                            HeadCircumference = "90-110",
                            Week = 14
                        },
                        new
                        {
                            Id = new Guid("b5fcd0fc-7cc1-4fee-8e5b-d6f5924ffcac"),
                            AbdominalCircumference = "70-85",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "24-30",
                            CrownRumpLength = "78-85",
                            EstimatedFetalWeight = "40-60",
                            FemurLength = "14-17",
                            HeadCircumference = "90-110",
                            Week = 15
                        },
                        new
                        {
                            Id = new Guid("f68c9a70-065f-4077-86d9-4cf5ab9391bb"),
                            AbdominalCircumference = "90-110",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "32-38",
                            EstimatedFetalWeight = "100-150",
                            FemurLength = "18-22",
                            HeadCircumference = "110-130",
                            Week = 16
                        },
                        new
                        {
                            Id = new Guid("22cb4b44-e807-4492-b04c-6d8492e1f7e6"),
                            AbdominalCircumference = "90-110",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "32-38",
                            EstimatedFetalWeight = "100-150",
                            FemurLength = "18-22",
                            HeadCircumference = "110-130",
                            Week = 17
                        },
                        new
                        {
                            Id = new Guid("d56fdd35-3f2d-4fca-81c7-32155b021c05"),
                            AbdominalCircumference = "110-130",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "38-45",
                            EstimatedFetalWeight = "190-220",
                            FemurLength = "22-27",
                            HeadCircumference = "130-150",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("aaf24e8a-baed-4857-aa66-1a504f0e3815"),
                            AbdominalCircumference = "110-130",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "38-45",
                            EstimatedFetalWeight = "190-220",
                            FemurLength = "22-27",
                            HeadCircumference = "130-150",
                            Week = 19
                        },
                        new
                        {
                            Id = new Guid("4525ba1d-8677-428d-84d2-6b72a93b6865"),
                            AbdominalCircumference = "125-155",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "45-50",
                            EstimatedFetalWeight = "260-300",
                            FemurLength = "30-34",
                            HeadCircumference = "150-170",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("779ccfda-d05f-4996-93e8-37bb889ac889"),
                            AbdominalCircumference = "125-155",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "45-50",
                            EstimatedFetalWeight = "260-300",
                            FemurLength = "30-34",
                            HeadCircumference = "150-170",
                            Week = 21
                        },
                        new
                        {
                            Id = new Guid("07260b9c-2335-415e-882e-bdbfd5844b7b"),
                            AbdominalCircumference = "150-180",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "50-55",
                            EstimatedFetalWeight = "350-420",
                            FemurLength = "34-38",
                            HeadCircumference = "170-190",
                            Week = 22
                        },
                        new
                        {
                            Id = new Guid("d63e989d-9972-4336-8fec-d8536c901ed2"),
                            AbdominalCircumference = "150-180",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "50-55",
                            EstimatedFetalWeight = "350-420",
                            FemurLength = "34-38",
                            HeadCircumference = "170-190",
                            Week = 23
                        },
                        new
                        {
                            Id = new Guid("f6f1292f-71a4-4995-b137-e54be0da8a47"),
                            AbdominalCircumference = "170-200",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "55-60",
                            EstimatedFetalWeight = "500-600",
                            FemurLength = "38-42",
                            HeadCircumference = "190-210",
                            Week = 24
                        },
                        new
                        {
                            Id = new Guid("3b9e8134-a00b-4330-b7f0-13c122a1d49e"),
                            AbdominalCircumference = "170-200",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "55-60",
                            EstimatedFetalWeight = "500-600",
                            FemurLength = "38-42",
                            HeadCircumference = "190-210",
                            Week = 25
                        },
                        new
                        {
                            Id = new Guid("e0b89eda-66ee-4464-922a-0d02995d11ab"),
                            AbdominalCircumference = "190-220",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "60-65",
                            EstimatedFetalWeight = "750-850",
                            FemurLength = "42-47",
                            HeadCircumference = "210-230",
                            Week = 26
                        },
                        new
                        {
                            Id = new Guid("1a1f3248-052c-4694-87d4-0ffd48c4da04"),
                            AbdominalCircumference = "190-220",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "60-65",
                            EstimatedFetalWeight = "750-850",
                            FemurLength = "42-47",
                            HeadCircumference = "210-230",
                            Week = 27
                        },
                        new
                        {
                            Id = new Guid("ed48c3dd-8434-47dd-b2bf-502f5ddd04fe"),
                            AbdominalCircumference = "210-250",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "65-70",
                            EstimatedFetalWeight = "1000-1200",
                            FemurLength = "47-52",
                            HeadCircumference = "230-250",
                            Week = 28
                        },
                        new
                        {
                            Id = new Guid("3320732c-525a-473e-af19-e5ad82a0f64c"),
                            AbdominalCircumference = "210-250",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "65-70",
                            EstimatedFetalWeight = "1000-1200",
                            FemurLength = "47-52",
                            HeadCircumference = "230-250",
                            Week = 29
                        },
                        new
                        {
                            Id = new Guid("6c260729-e694-42f9-808c-48e33ae10361"),
                            AbdominalCircumference = "230-270",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "70-75",
                            EstimatedFetalWeight = "1400-1600",
                            FemurLength = "52-56",
                            HeadCircumference = "250-270",
                            Week = 30
                        },
                        new
                        {
                            Id = new Guid("fb7440d7-2f6a-4726-9db2-a70d872a31cb"),
                            AbdominalCircumference = "230-270",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "70-75",
                            EstimatedFetalWeight = "1400-1600",
                            FemurLength = "52-56",
                            HeadCircumference = "250-270",
                            Week = 31
                        },
                        new
                        {
                            Id = new Guid("b49cb677-1113-4fd3-8578-eece2dd4c2fa"),
                            AbdominalCircumference = "250-290",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "75-80",
                            EstimatedFetalWeight = "1700-2000",
                            FemurLength = "56-60",
                            HeadCircumference = "270-290",
                            Week = 32
                        },
                        new
                        {
                            Id = new Guid("0a856f1d-5092-4c15-bd98-aa03cb1c3c33"),
                            AbdominalCircumference = "250-290",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "75-80",
                            EstimatedFetalWeight = "1700-2000",
                            FemurLength = "56-60",
                            HeadCircumference = "270-290",
                            Week = 33
                        },
                        new
                        {
                            Id = new Guid("01df5a0b-bbc8-4619-be38-5ec5cec184d7"),
                            AbdominalCircumference = "270-310",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "80-85",
                            EstimatedFetalWeight = "2100-2500",
                            FemurLength = "60-65",
                            HeadCircumference = "290-310",
                            Week = 34
                        },
                        new
                        {
                            Id = new Guid("2e0fcac3-7fea-43c0-b7e3-98644428b229"),
                            AbdominalCircumference = "270-310",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "80-85",
                            EstimatedFetalWeight = "2100-2500",
                            FemurLength = "60-65",
                            HeadCircumference = "290-310",
                            Week = 35
                        },
                        new
                        {
                            Id = new Guid("07ec310e-8341-41c4-a1c5-59d55aee1e13"),
                            AbdominalCircumference = "290-330",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "85-90",
                            EstimatedFetalWeight = "2500-2900",
                            FemurLength = "65-70",
                            HeadCircumference = "310-330",
                            Week = 36
                        },
                        new
                        {
                            Id = new Guid("ef8e59e2-a504-46ef-b383-ef47f6834d33"),
                            AbdominalCircumference = "290-330",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "85-90",
                            EstimatedFetalWeight = "2500-2900",
                            FemurLength = "65-70",
                            HeadCircumference = "310-330",
                            Week = 37
                        },
                        new
                        {
                            Id = new Guid("e8320733-bd59-4d22-8835-301cee37a295"),
                            AbdominalCircumference = "310-350",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "90-95",
                            EstimatedFetalWeight = "2900-3200",
                            FemurLength = "70-75",
                            HeadCircumference = "330-350",
                            Week = 38
                        },
                        new
                        {
                            Id = new Guid("34cdfc41-dc00-47cb-a620-1ee46e55bae3"),
                            AbdominalCircumference = "310-350",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "90-95",
                            EstimatedFetalWeight = "2900-3200",
                            FemurLength = "70-75",
                            HeadCircumference = "330-350",
                            Week = 39
                        },
                        new
                        {
                            Id = new Guid("f0eb3c07-af91-490a-9897-886c2ef39b7e"),
                            AbdominalCircumference = "320-360",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "95-100",
                            EstimatedFetalWeight = "3200-3500",
                            FemurLength = "75-80",
                            HeadCircumference = "350-370",
                            Week = 40
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5aefed2-5df7-4d2f-bec4-7932da2849de"),
                            Name = "Em bé"
                        },
                        new
                        {
                            Id = new Guid("d1a17f1e-eb54-43bc-bdac-ca1873c99362"),
                            Name = "Mang thai"
                        },
                        new
                        {
                            Id = new Guid("05ac02ec-3fd0-47ad-ab14-4a969bec6e3d"),
                            Name = "Nuôi dạy con cái"
                        },
                        new
                        {
                            Id = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Name = "Sức khỏe"
                        },
                        new
                        {
                            Id = new Guid("bc557eef-49f8-4bca-8f0a-9700b8c13e7e"),
                            Name = "Dinh dưỡng"
                        },
                        new
                        {
                            Id = new Guid("8e18a540-ce22-46d3-ba7b-cde9d20dca38"),
                            Name = "Bài tập thể dục"
                        },
                        new
                        {
                            Id = new Guid("3185dbf9-c4be-4c0e-b8e6-4d9ee47bb296"),
                            Name = "Sức khỏe tinh thần"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a0c434f-b4b8-4342-a991-b343f2b0ee3d"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            CCCD = "123456789012",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 53, DateTimeKind.Local).AddTicks(4749),
                            DateOfBirth = new DateOnly(2002, 1, 23),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAEEbUQKPlL2I4v7WzRw1MHGB8ozI+ih30zzNzgI6fM3/DOX59mLqSKJXyQC+j/qw37Q==",
                            RoleId = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("12c1b9d8-dd0d-4edf-8aec-dbcf8d0aca16"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            CCCD = "082202000011",
                            CreatedAt = new DateTime(2025, 3, 29, 13, 28, 14, 112, DateTimeKind.Local).AddTicks(8029),
                            DateOfBirth = new DateOnly(2002, 1, 23),
                            Email = "thuhuong@gmail.com",
                            FullName = "Trần Thị Thu Hương",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAENB8p6WFc5ockJFBj1WTbe5EQlOwjSvubzhfOHnLMoNcG5E6uwLuajbcNPxhgVQfsg==",
                            RoleId = new Guid("416b6528-8c94-4ddc-8413-012b8ee38ae4"),
                            Username = "thuhuong"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Slot", "Slot")
                        .WithOne("Appointment")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Appointment", "SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Tag", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Fetus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Fetus", "Fetus")
                        .WithMany("FetusHealths")
                        .HasForeignKey("FetusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fetus");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Slots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Subscription", "Subscription")
                        .WithOne("Transaction")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Transaction", "SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Navigation("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Fetus");

                    b.Navigation("Likes");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
