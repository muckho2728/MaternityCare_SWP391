// <auto-generated />
using System;
using MaternityCare_Backend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaternityCare_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250223143322_Update-Database")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LamVietTrung.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 52, DateTimeKind.Local).AddTicks(9042),
                            Email = "lamviettrung@gmail.com",
                            FullName = "Lam Viet Trung",
                            IsDeleted = false,
                            PhoneNumber = "0457009809",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 5.0
                        },
                        new
                        {
                            Id = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LeThiMinhHong.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 52, DateTimeKind.Local).AddTicks(9067),
                            Email = "lethiminhhong@gmail.com",
                            FullName = "Le Thi Minh Hong",
                            IsDeleted = false,
                            PhoneNumber = "0862605697",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 3.0
                        },
                        new
                        {
                            Id = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/NguyenThiThuHa.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 52, DateTimeKind.Local).AddTicks(9072),
                            Email = "nguyenthithuha@gmail.com",
                            FullName = "Nguyen Thi Thu Ha",
                            IsDeleted = false,
                            PhoneNumber = "0137746881",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 7.0
                        },
                        new
                        {
                            Id = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/VoDucHieu.jpg",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 52, DateTimeKind.Local).AddTicks(9077),
                            Email = "voduchieu@gmail.com",
                            FullName = "Vo Duc Hieu",
                            IsDeleted = false,
                            PhoneNumber = "0754559328",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 8.0
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ConceptionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fetuses");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<double?>("AmnioticFluidLevel")
                        .HasColumnType("float");

                    b.Property<double?>("BiparietalDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("CrownRumpLength")
                        .HasColumnType("float");

                    b.Property<double?>("EstimatedFetalWeight")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnType("float");

                    b.Property<Guid>("FetusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("GestationalSacDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FetusId");

                    b.ToTable("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BlogId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("595a4777-de2b-4c8a-a45f-3ddba55dddee"),
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 55, DateTimeKind.Local).AddTicks(963),
                            Duration = 10.0,
                            Feature = "Like and comment blogs;Update fetus health record",
                            IsDeleted = false,
                            Price = 0.0,
                            Type = "Free"
                        },
                        new
                        {
                            Id = new Guid("e401f557-307a-4b1d-b65b-d7c26f3aac61"),
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 55, DateTimeKind.Local).AddTicks(975),
                            Duration = 10.0,
                            Feature = "All the free features;Generate chart;Book doctor in advance",
                            IsDeleted = false,
                            Price = 200000.0,
                            Type = "Premium"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reminders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78e56da5-8949-4edb-bb8e-77c7c272ed95"),
                            Description = "You should have your first prenatal visit and have an ultrasound or blood tests to confirm the pregnancy.",
                            Week = 5
                        },
                        new
                        {
                            Id = new Guid("ce3fbe6c-87d4-4623-912d-7b900968b521"),
                            Description = "You should have your first-trimester screening to check for chromosomal conditions.",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("7c51a5d3-163a-488e-8351-f3177a12f706"),
                            Description = "This is the beginning of the second trimester. A routine check-up is a must to check if the pregnancy is progressing normally",
                            Week = 13
                        },
                        new
                        {
                            Id = new Guid("93adc9a5-df94-481e-9b3a-2fd9cffe0814"),
                            Description = "You should have an anomaly scan to examine fetal anatomy.",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("f9ad0ce6-a441-4ec7-b472-176803d87457"),
                            Description = "You should have the mid-pregnancy ultrasound to check the baby’s development.",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("043a540d-2582-4433-8014-827836d4f9ac"),
                            Description = "This is the beginning of the third trimester. You should have schedule for additional tests or screenings (such as for anemia or gestational diabetes)",
                            Week = 25
                        },
                        new
                        {
                            Id = new Guid("8f20462d-d13c-490a-9f15-0061182a6d05"),
                            Description = "From now on, you have schedule an appointment with your doctor once a week to make sure the baby is developing weel.",
                            Week = 31
                        },
                        new
                        {
                            Id = new Guid("78e60773-2d68-4f3f-ae17-63cc39f2481b"),
                            Description = "You’re now considered early term. You should have regular monitoring.",
                            Week = 37
                        },
                        new
                        {
                            Id = new Guid("6f1ef3da-0e40-4d55-9591-c56f3196b2a0"),
                            Description = "You’re now considered full term. You should attend all scheduled prenatal appointments and contact your provider if you experience any changes or discomfort.",
                            Week = 39
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("416b6528-8c94-4ddc-8413-012b8ee38ae4"),
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ca42f68-c056-4e8f-8aec-926897804757"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("80e15b55-9851-4551-92c9-b39d8516bf01"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("f266648d-9702-4c29-bfa6-85dea52a1d3c"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a3992574-87e9-4b8a-9cbc-1b62b24648fe"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b0b0706d-eb94-4c5d-82b4-d2a6d42a1c0f"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6d596ffe-f8e9-4470-9fea-1d39a67fdb85"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c8861c1b-101a-4efb-92f7-23bc5911e4df"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("17d0a12d-6de6-4f8a-a22c-8eff07662940"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("9e78ced9-8f21-4884-b959-5fa3bd6c8e65"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("02300947-6d92-4399-b132-cae490c15f11"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("8db9926d-d351-46e1-a5a4-b430804a673b"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d3796517-e82a-4b4e-91bf-f6cbe6bce3fe"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c342b5bc-2737-466e-9911-b0c55a6c4211"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7e561c1d-289c-4966-8300-d5459b7f27f2"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b85ebb49-3059-4fee-b93e-bef0aa378090"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1fd95b8d-a90a-4807-9b23-717ba77eae62"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("025be50f-b0cb-4225-a069-f4ac39b4ddf8"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("34835f4e-0447-4fb5-ae1a-c4df41f050e7"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("81be1939-e836-43b0-91c1-4c8c7a5eba6a"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("00b6539c-5b9f-4098-8035-f93d46eb5424"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("be1795d1-06d8-4d1a-a551-e85a11c9ca2e"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d79a3bbe-6688-472a-919a-f459aa85eabd"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("2c8ab3dd-8b59-49b4-aeb6-a089e2a096a4"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c6e2150b-a9c8-4951-8cd0-1824fc66c51a"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("d14ab618-13e8-42b1-b8d2-a233e7eab46e"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6c4b7075-b479-4a61-97f6-b39fe64aebd2"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("1e191e08-d3ad-4a91-ad6c-d52eaaf66044"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f42bfe09-849a-4447-b1e8-28d9053946e8"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("8f1336de-cc91-4d73-84f4-7090faed854c"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("fb8efbab-a416-4ae4-9d3e-dc12ed4d3d8a"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("3cf2e8da-38b6-4da6-8c26-de47d040bef6"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("06217215-ea27-4a67-a63f-f973c8794bf2"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("bc7bcdae-6ab9-4277-b954-d0c2d05fd47b"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a54ffd2d-7d04-43b0-947e-bb81bba14c35"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("61a95691-ac8a-434b-beb5-42432eed65c1"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("34098302-4eed-4188-932f-c63e536cb99f"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("bacf9489-a577-4955-a522-faed67211ad0"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5ef8c065-8bac-40c4-bb9e-2489709b7b16"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4a41f146-dc48-4128-9979-0ee1b04f7deb"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("21103c13-89a2-4ab0-a241-bdd40d72ef0a"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("77782e38-2902-4527-93b1-909fb4728390"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d45a75bf-2f92-4c2e-a07f-9e52a26ac3ef"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("d7f9899e-f63b-4e4e-930b-a1fbb552d7e4"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7435f941-2025-4785-a0aa-3ef982a32078"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("9bf20116-da75-4eb4-af05-0d1f1714323f"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("dd97809b-c2f2-4f2c-ba61-1e461f4412d9"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("f1fb76b9-60db-451c-95ca-96f0c1a0b6e9"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e7b521d4-b048-40f1-b470-7f04f5a6dcd5"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("52ed22d9-86e5-4490-84b0-d6f95653ad7b"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f07bd02e-a650-49ec-b135-96689bf088ad"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("434d5747-fc35-4e40-b20d-ff2748679eb4"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5b4149ab-d5b3-4fa1-b366-322599b3ac11"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b436ea7e-d503-44ec-9987-a5eb242e8d4f"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9d1373ce-829d-4216-a2dd-7a33743ad933"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("68f4d390-418b-47e7-bc33-42db3a83e88c"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("80b4735d-009e-4b42-a02f-e85f36f1686c"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("a8ac3823-8251-4081-9de1-40b6f8993e46"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4a70e437-2e0e-4032-bcc1-be102ca829fa"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("5f9156ae-aa95-411a-98d3-7e32904ca672"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("25516d98-0db9-4127-b5ef-54193739bad0"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("dcc4cdfb-e6bf-4a83-9dce-42e237d2f6a5"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("aa51ba4d-5ad3-4660-bd38-a4d66ac46130"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4f2668a2-db8f-49ae-9089-48b9dd13e568"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b8fcecbb-a3fa-4594-a66a-8706eb020b40"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.StandardFetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbdominalCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AmnioticFluidLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BiparietalDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CrownRumpLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EstimatedFetalWeight")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FemurLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GestationalSacDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HeadCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StandardFetusHealths");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b14fe439-9de4-42af-a7dc-1802f5092b0f"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "4-9",
                            GestationalSacDiameter = "14-25",
                            Week = 6
                        },
                        new
                        {
                            Id = new Guid("ab0fd326-01f1-4419-9eb3-f8bc8772f34d"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "9-14",
                            GestationalSacDiameter = "18-30",
                            Week = 7
                        },
                        new
                        {
                            Id = new Guid("51a7e6f6-c101-4133-b131-96adaedea5b4"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "14-22",
                            GestationalSacDiameter = "25-35",
                            Week = 8
                        },
                        new
                        {
                            Id = new Guid("1cf13ce2-a45e-46c2-ac71-8f9fc2e13258"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "22-31",
                            GestationalSacDiameter = "28-36",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("d38c51c1-80e2-4c61-b648-70ac6c7810a9"),
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "15-22",
                            CrownRumpLength = "31-40",
                            EstimatedFetalWeight = "5-8",
                            FemurLength = "7-9",
                            GestationalSacDiameter = "30-40",
                            HeadCircumference = "56-78",
                            Week = 10
                        },
                        new
                        {
                            Id = new Guid("53262075-8412-49ef-ab68-b0ef165f58c0"),
                            AbdominalCircumference = "50-65",
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "21-24",
                            CrownRumpLength = "50-60",
                            EstimatedFetalWeight = "14-19",
                            FemurLength = "9-12",
                            GestationalSacDiameter = "40-50",
                            HeadCircumference = "70-85",
                            Week = 12
                        },
                        new
                        {
                            Id = new Guid("41468045-a042-4b04-b939-47527ecf3f2e"),
                            AbdominalCircumference = "70-85",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "24-30",
                            CrownRumpLength = "78-85",
                            EstimatedFetalWeight = "40-60",
                            FemurLength = "14-17",
                            HeadCircumference = "90-110",
                            Week = 14
                        },
                        new
                        {
                            Id = new Guid("67272a92-13d9-4d38-8046-7b5e9c890840"),
                            AbdominalCircumference = "90-110",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "32-38",
                            EstimatedFetalWeight = "100-150",
                            FemurLength = "18-22",
                            HeadCircumference = "110-130",
                            Week = 16
                        },
                        new
                        {
                            Id = new Guid("85b336e3-9ca7-4d5b-8bde-c339a6408d27"),
                            AbdominalCircumference = "110-130",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "38-45",
                            EstimatedFetalWeight = "190-220",
                            FemurLength = "22-27",
                            HeadCircumference = "130-150",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("8e524de0-81a6-4b48-850a-1488289db21b"),
                            AbdominalCircumference = "125-155",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "45-50",
                            EstimatedFetalWeight = "260-300",
                            FemurLength = "30-34",
                            HeadCircumference = "150-170",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("06ede5ac-c062-4d2f-b7e9-fb45037e52e3"),
                            AbdominalCircumference = "150-180",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "50-55",
                            EstimatedFetalWeight = "350-420",
                            FemurLength = "34-38",
                            HeadCircumference = "170-190",
                            Week = 22
                        },
                        new
                        {
                            Id = new Guid("1e7e8311-437a-409a-868b-e396c6fbbb35"),
                            AbdominalCircumference = "170-200",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "55-60",
                            EstimatedFetalWeight = "500-600",
                            FemurLength = "38-42",
                            HeadCircumference = "190-210",
                            Week = 24
                        },
                        new
                        {
                            Id = new Guid("61620db3-7716-423c-ab72-e2709a8d3936"),
                            AbdominalCircumference = "190-220",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "60-65",
                            EstimatedFetalWeight = "750-850",
                            FemurLength = "42-47",
                            HeadCircumference = "210-230",
                            Week = 26
                        },
                        new
                        {
                            Id = new Guid("8567aae2-1a88-4f67-9795-6ae33d0876e8"),
                            AbdominalCircumference = "210-250",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "65-70",
                            EstimatedFetalWeight = "1000-1200",
                            FemurLength = "47-52",
                            HeadCircumference = "230-250",
                            Week = 28
                        },
                        new
                        {
                            Id = new Guid("2567632b-b209-4bfb-ab61-45caeacfb60a"),
                            AbdominalCircumference = "230-270",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "70-75",
                            EstimatedFetalWeight = "1400-1600",
                            FemurLength = "52-56",
                            HeadCircumference = "250-270",
                            Week = 30
                        },
                        new
                        {
                            Id = new Guid("5809b410-3a93-44b0-affa-b3380383a631"),
                            AbdominalCircumference = "250-290",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "75-80",
                            EstimatedFetalWeight = "1700-2000",
                            FemurLength = "56-60",
                            HeadCircumference = "270-290",
                            Week = 32
                        },
                        new
                        {
                            Id = new Guid("e1baa4e4-422c-4511-87c4-a0ce4c54da2e"),
                            AbdominalCircumference = "270-310",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "80-85",
                            EstimatedFetalWeight = "2100-2500",
                            FemurLength = "60-65",
                            HeadCircumference = "290-310",
                            Week = 34
                        },
                        new
                        {
                            Id = new Guid("3c7b60e9-2d24-4292-a6c7-01a1c6a2b02a"),
                            AbdominalCircumference = "290-330",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "85-90",
                            EstimatedFetalWeight = "2500-2900",
                            FemurLength = "65-70",
                            HeadCircumference = "310-330",
                            Week = 36
                        },
                        new
                        {
                            Id = new Guid("7bd43059-69b6-470d-867d-2e66c9188b98"),
                            AbdominalCircumference = "310-350",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "90-95",
                            EstimatedFetalWeight = "2900-3200",
                            FemurLength = "70-75",
                            HeadCircumference = "330-350",
                            Week = 38
                        },
                        new
                        {
                            Id = new Guid("3eb6585b-8927-4898-b664-63ec2b7f757d"),
                            AbdominalCircumference = "320-360",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "95-100",
                            EstimatedFetalWeight = "3200-3500",
                            FemurLength = "75-80",
                            HeadCircumference = "350-370",
                            Week = 40
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5aefed2-5df7-4d2f-bec4-7932da2849de"),
                            Name = "Baby"
                        },
                        new
                        {
                            Id = new Guid("d1a17f1e-eb54-43bc-bdac-ca1873c99362"),
                            Name = "Pregnancy"
                        },
                        new
                        {
                            Id = new Guid("05ac02ec-3fd0-47ad-ab14-4a969bec6e3d"),
                            Name = "Parenting"
                        },
                        new
                        {
                            Id = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("bc557eef-49f8-4bca-8f0a-9700b8c13e7e"),
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = new Guid("8e18a540-ce22-46d3-ba7b-cde9d20dca38"),
                            Name = "Exercise"
                        },
                        new
                        {
                            Id = new Guid("3185dbf9-c4be-4c0e-b8e6-4d9ee47bb296"),
                            Name = "Mental Health"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a0c434f-b4b8-4342-a991-b343f2b0ee3d"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            CCCD = "123456789012",
                            CreatedAt = new DateTime(2025, 2, 23, 21, 33, 22, 57, DateTimeKind.Local).AddTicks(7333),
                            DateOfBirth = new DateOnly(2002, 1, 23),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAELLyGguUzB59A8+slGaYaZo0JpCEpCV4rkheDinPkHOFqAwUBkHE2meHWtXXHKvOiw==",
                            RoleId = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Slot", "Slot")
                        .WithOne("Appointment")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Appointment", "SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Tag", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Fetus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Fetus", "Fetus")
                        .WithMany("FetusHealths")
                        .HasForeignKey("FetusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fetus");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Slots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Subscription", "Subscription")
                        .WithOne("Transaction")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Transaction", "SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Navigation("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Fetus");

                    b.Navigation("Likes");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
