// <auto-generated />
using System;
using MaternityCare_Backend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaternityCare_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250205140505_UpdateEntityInStandardFetusHealth")]
    partial class UpdateEntityInStandardFetusHealth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LamVietTrung.jpg",
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 670, DateTimeKind.Local).AddTicks(6749),
                            Email = "lamviettrung@gmail.com",
                            FullName = "Lam Viet Trung",
                            IsDeleted = false,
                            PhoneNumber = "0457009809",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 5.0
                        },
                        new
                        {
                            Id = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LeThiMinhHong.jpg",
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 670, DateTimeKind.Local).AddTicks(6766),
                            Email = "lethiminhhong@gmail.com",
                            FullName = "Le Thi Minh Hong",
                            IsDeleted = false,
                            PhoneNumber = "0862605697",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 3.0
                        },
                        new
                        {
                            Id = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/NguyenThiThuHa.jpg",
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 670, DateTimeKind.Local).AddTicks(6769),
                            Email = "nguyenthithuha@gmail.com",
                            FullName = "Nguyen Thi Thu Ha",
                            IsDeleted = false,
                            PhoneNumber = "0137746881",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 7.0
                        },
                        new
                        {
                            Id = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/VoDucHieu.jpg",
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 670, DateTimeKind.Local).AddTicks(6772),
                            Email = "voduchieu@gmail.com",
                            FullName = "Vo Duc Hieu",
                            IsDeleted = false,
                            PhoneNumber = "0754559328",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 8.0
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ConceptionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fetuses");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<double?>("AmnioticFluidLevel")
                        .HasColumnType("float");

                    b.Property<double?>("BiparietalDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("CrownRumpLength")
                        .HasColumnType("float");

                    b.Property<double?>("EstimatedFetalWeight")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnType("float");

                    b.Property<Guid>("FetusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("GestationalSacDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FetusId");

                    b.ToTable("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("595a4777-de2b-4c8a-a45f-3ddba55dddee"),
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 671, DateTimeKind.Local).AddTicks(9204),
                            Duration = 10.0,
                            Feature = "Like and comment blogs;Update fetus health record",
                            IsDeleted = false,
                            Price = 0.0,
                            Type = "Free"
                        },
                        new
                        {
                            Id = new Guid("e401f557-307a-4b1d-b65b-d7c26f3aac61"),
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 671, DateTimeKind.Local).AddTicks(9212),
                            Duration = 10.0,
                            Feature = "All the free features;Generate chart;Book doctor in advance",
                            IsDeleted = false,
                            Price = 200000.0,
                            Type = "Premium"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reminders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d97d03ae-a8c6-40e9-803b-8a71f9510dc8"),
                            Description = "You should have your first prenatal visit and have an ultrasound or blood tests to confirm the pregnancy.",
                            Week = 5
                        },
                        new
                        {
                            Id = new Guid("506a6d00-123c-429b-97be-aac9da6810de"),
                            Description = "You should have your first-trimester screening to check for chromosomal conditions.",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("4caede6c-8c20-4a41-8093-02b6ced54041"),
                            Description = "This is the beginning of the second trimester. A routine check-up is a must to check if the pregnancy is progressing normally",
                            Week = 13
                        },
                        new
                        {
                            Id = new Guid("72a01e4b-641c-40a5-b20e-23585610dc61"),
                            Description = "You should have an anomaly scan to examine fetal anatomy.",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("f5ebe88e-f593-4b4a-b76d-3f7403855bd4"),
                            Description = "You should have the mid-pregnancy ultrasound to check the baby’s development.",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("3eaead99-6fb1-4728-9821-c4a85ebfd059"),
                            Description = "This is the beginning of the third trimester. You should have schedule for additional tests or screenings (such as for anemia or gestational diabetes)",
                            Week = 25
                        },
                        new
                        {
                            Id = new Guid("2a58c6f2-90be-4d23-99a9-0e712b046979"),
                            Description = "From now on, you have schedule an appointment with your doctor once a week to make sure the baby is developing weel.",
                            Week = 31
                        },
                        new
                        {
                            Id = new Guid("ee9acd27-6a5e-4bac-8716-d1f86a9847d9"),
                            Description = "You’re now considered early term. You should have regular monitoring.",
                            Week = 37
                        },
                        new
                        {
                            Id = new Guid("509d0125-b5f3-49c1-a2a5-f08f8941b889"),
                            Description = "You’re now considered full term. You should attend all scheduled prenatal appointments and contact your provider if you experience any changes or discomfort.",
                            Week = 39
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("416b6528-8c94-4ddc-8413-012b8ee38ae4"),
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("311f0492-f126-48d9-912d-f9446d6b053d"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("040805f4-dda1-40f7-ab19-6122cf02f87d"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c4fc53fb-63bb-41e0-aff6-986b3fff7ac9"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d419fbcf-c2f0-4906-b515-5fe3c3fb53ee"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c9513ca8-fccc-4503-9092-bd6202f0a34c"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b876effd-9a45-4b0e-95a9-b1951c46250b"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("2dd4112f-0efa-4611-83b1-40b50a3e4be7"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f088e4b5-9304-492e-81ba-d2db6345c17d"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("657227b9-f964-45aa-a6e4-4ef02f2f1bce"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4e832071-8a48-4df2-bc9e-b841641cd210"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4938d89a-982b-4a62-b7bb-133d7a65f16b"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3f8a4ff4-36db-4a43-86c7-535fd102258c"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e3edf61d-ebf1-4a6a-85fb-32babd2a79c7"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("42d3dc95-3ab6-419a-ad12-40dc7101d7ac"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("1f047f65-0ba0-4c18-8532-8b96deb67dd4"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("68d78c31-27bc-49d0-be0f-22f7e927ef63"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("1eadf600-57f9-4b9d-807b-29ce3e79c246"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("121eda26-c63f-4866-a98b-c6f1167eb345"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("5c98b514-9b14-4e7e-93cd-886ec6d38525"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("444137f6-e1de-4f89-ab1d-fd3c287f0f52"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("354d65b4-a70a-43a8-8cbb-3b8de0d04510"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a9bb4604-9c30-4b0b-bedb-c52bf0132b45"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("17c3807e-5d4e-4016-ae1c-0d8212b8b4bd"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("855f5f62-f7e5-4b2f-bb71-7e2886be6432"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("d1c7bfda-3dac-4a26-9bad-0c2bc76547f9"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("cbf6be2e-a82f-418d-8a88-ccac5e7bb7fb"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("8dcbaf51-c474-4c41-98c0-0c6a4ea5f9a5"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e984a427-e8b9-41c5-a498-ac32f852852d"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("929f5837-93f2-4cca-a970-3d8ead01a63a"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("87d925cd-0548-492b-96f5-3fc4521bf9f6"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("be007a7c-d5ee-4fa5-b3be-5240c88c2963"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("abb30e88-74da-4b95-830d-a32f7b19ff10"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("0a844ca6-dba3-4904-bd77-27cc55da137d"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b5e6fa89-592e-44ba-8b56-910a06ca5e08"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("11e224a9-1757-438d-819a-cac387cab26e"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("08364f05-395d-483d-900e-7d8513f363bc"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("8fd36db6-1c3e-4be5-ae7a-169a3bd57053"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("af0e8b85-6db5-45a8-9f06-aa8414c959cf"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e8c109ee-3825-4e20-b289-5941a83a9b13"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("22a033a9-2325-46b8-998e-26d88e9dd2a1"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("eb93a34c-7d60-4164-a49f-7a91874329df"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("11bf4e17-ab60-4114-afbc-7f4aa705a0f1"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("dcaddbbf-37f5-4158-8fec-637ea68f3ff9"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7897662c-721c-4e03-a427-7f8693e24068"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("ed651330-7ba2-4523-aaa5-8d258ac98585"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d8400615-75ff-41a3-892e-6b57394eeea4"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("0eda4425-c381-4c23-85d5-83d3977df85d"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("798b3bba-496d-41a3-a5a0-37786ff49302"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("8fcfd6de-3dd7-4cb2-8a48-60c4e9ec6636"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("0813b45b-fe7e-4b52-96ff-c2f8b28ddf27"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("ebceed8b-fa94-4b3d-9629-a83738449f6b"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a9f6872b-057e-4f42-bbf5-097f13d7e781"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("729a2e3d-46c9-4a9d-b639-a1fcfdfc8454"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8517161e-0633-4d22-98ee-baa3faa32dfd"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("dd12f379-2621-400d-8f11-e613ae3a346b"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("055f23cb-edae-4fbb-a202-86805a9f7777"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b1ca1ef4-6f2a-4357-906c-fa229e3f2a36"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4c505bb0-e477-4017-b447-951fc0da3e44"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("24f4d787-d6bd-4551-89cc-dd77666b16f7"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("41e23096-f330-4e40-98d6-3597d8faffdf"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b4d91c35-a82b-4833-a8af-382de473fb71"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ba77d2dd-0a30-4b4e-8da5-3c37d8b6b000"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c592bb92-da33-439f-b9c6-9907e646c9c0"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("cfdce118-3ab4-46ee-ba1c-c157f2b911f1"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.StandardFetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbdominalCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AmnioticFluidLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BiparietalDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CrownRumpLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EstimatedFetalWeight")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FemurLength")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GestationalSacDiameter")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HeadCircumference")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StandardFetusHealths");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cebbc1e-b183-44a9-a9b8-5ad5dbba429c"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "4-9",
                            GestationalSacDiameter = "14-25",
                            Week = 6
                        },
                        new
                        {
                            Id = new Guid("d830d437-264e-4e8d-999e-595b7ed0a987"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "9-14",
                            GestationalSacDiameter = "18-30",
                            Week = 7
                        },
                        new
                        {
                            Id = new Guid("125155e3-e465-4ef5-9425-dba024ce020a"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "14-22",
                            GestationalSacDiameter = "25-35",
                            Week = 8
                        },
                        new
                        {
                            Id = new Guid("acf28231-f9cc-44dc-b75c-68bb075a3e05"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "22-31",
                            GestationalSacDiameter = "28-36",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("c6c8d977-3337-4c3c-a1a8-dbbf86665870"),
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "15-22",
                            CrownRumpLength = "31-40",
                            EstimatedFetalWeight = "5-8",
                            FemurLength = "7-9",
                            GestationalSacDiameter = "30-40",
                            HeadCircumference = "56-78",
                            Week = 10
                        },
                        new
                        {
                            Id = new Guid("72674a05-8076-496e-bb9d-1c05161b5c5a"),
                            AbdominalCircumference = "50-65",
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "21-24",
                            CrownRumpLength = "50-60",
                            EstimatedFetalWeight = "14-19",
                            FemurLength = "9-12",
                            GestationalSacDiameter = "40-50",
                            HeadCircumference = "70-85",
                            Week = 12
                        },
                        new
                        {
                            Id = new Guid("47768242-f008-474d-acd0-b424b718cbe0"),
                            AbdominalCircumference = "70-85",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "24-30",
                            CrownRumpLength = "78-85",
                            EstimatedFetalWeight = "40-60",
                            FemurLength = "14-17",
                            HeadCircumference = "90-110",
                            Week = 14
                        },
                        new
                        {
                            Id = new Guid("0cb8321c-7129-464a-99dd-fe3afe6801bf"),
                            AbdominalCircumference = "90-110",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "32-38",
                            EstimatedFetalWeight = "100-150",
                            FemurLength = "18-22",
                            HeadCircumference = "110-130",
                            Week = 16
                        },
                        new
                        {
                            Id = new Guid("4dca96df-1229-4636-891b-2f8cf2bcabf5"),
                            AbdominalCircumference = "110-130",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "38-45",
                            EstimatedFetalWeight = "190-220",
                            FemurLength = "22-27",
                            HeadCircumference = "130-150",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("763db8a1-4e5f-42d7-9485-0e3cd5b97de9"),
                            AbdominalCircumference = "125-155",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "45-50",
                            EstimatedFetalWeight = "260-300",
                            FemurLength = "30-34",
                            HeadCircumference = "150-170",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("82a6a318-2e82-470f-b65c-bd4884b915a8"),
                            AbdominalCircumference = "150-180",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "50-55",
                            EstimatedFetalWeight = "350-420",
                            FemurLength = "34-38",
                            HeadCircumference = "170-190",
                            Week = 22
                        },
                        new
                        {
                            Id = new Guid("8f948eb1-d778-4939-9990-4c0b079111c5"),
                            AbdominalCircumference = "170-200",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "55-60",
                            EstimatedFetalWeight = "500-600",
                            FemurLength = "38-42",
                            HeadCircumference = "190-210",
                            Week = 24
                        },
                        new
                        {
                            Id = new Guid("68dfad16-e630-4cb6-9973-7e7d12d7a4f5"),
                            AbdominalCircumference = "190-220",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "60-65",
                            EstimatedFetalWeight = "750-850",
                            FemurLength = "42-47",
                            HeadCircumference = "210-230",
                            Week = 26
                        },
                        new
                        {
                            Id = new Guid("fb275bc8-95d8-48dc-b8c1-d4feb497c9bf"),
                            AbdominalCircumference = "210-250",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "65-70",
                            EstimatedFetalWeight = "1000-1200",
                            FemurLength = "47-52",
                            HeadCircumference = "230-250",
                            Week = 28
                        },
                        new
                        {
                            Id = new Guid("fe00cb84-c4be-4f78-b84e-39d60dd643cd"),
                            AbdominalCircumference = "230-270",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "70-75",
                            EstimatedFetalWeight = "1400-1600",
                            FemurLength = "52-56",
                            HeadCircumference = "250-270",
                            Week = 30
                        },
                        new
                        {
                            Id = new Guid("d575f93c-2e3b-404c-8d65-f6f7b6badf7d"),
                            AbdominalCircumference = "250-290",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "75-80",
                            EstimatedFetalWeight = "1700-2000",
                            FemurLength = "56-60",
                            HeadCircumference = "270-290",
                            Week = 32
                        },
                        new
                        {
                            Id = new Guid("81af6bdc-5c27-426e-aee9-e899aaf87dfe"),
                            AbdominalCircumference = "270-310",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "80-85",
                            EstimatedFetalWeight = "2100-2500",
                            FemurLength = "60-65",
                            HeadCircumference = "290-310",
                            Week = 34
                        },
                        new
                        {
                            Id = new Guid("31c2ced6-ccf6-44ae-9b1d-80bf556c5e03"),
                            AbdominalCircumference = "290-330",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "85-90",
                            EstimatedFetalWeight = "2500-2900",
                            FemurLength = "65-70",
                            HeadCircumference = "310-330",
                            Week = 36
                        },
                        new
                        {
                            Id = new Guid("d4f0e043-d33f-4106-8dea-da32b49b1bdc"),
                            AbdominalCircumference = "310-350",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "90-95",
                            EstimatedFetalWeight = "2900-3200",
                            FemurLength = "70-75",
                            HeadCircumference = "330-350",
                            Week = 38
                        },
                        new
                        {
                            Id = new Guid("dfaf736d-385e-4ca2-af2d-6a205832e946"),
                            AbdominalCircumference = "320-360",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "95-100",
                            EstimatedFetalWeight = "3200-3500",
                            FemurLength = "75-80",
                            HeadCircumference = "350-370",
                            Week = 40
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5aefed2-5df7-4d2f-bec4-7932da2849de"),
                            Name = "Baby"
                        },
                        new
                        {
                            Id = new Guid("d1a17f1e-eb54-43bc-bdac-ca1873c99362"),
                            Name = "Pregnancy"
                        },
                        new
                        {
                            Id = new Guid("05ac02ec-3fd0-47ad-ab14-4a969bec6e3d"),
                            Name = "Parenting"
                        },
                        new
                        {
                            Id = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("bc557eef-49f8-4bca-8f0a-9700b8c13e7e"),
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = new Guid("8e18a540-ce22-46d3-ba7b-cde9d20dca38"),
                            Name = "Exercise"
                        },
                        new
                        {
                            Id = new Guid("3185dbf9-c4be-4c0e-b8e6-4d9ee47bb296"),
                            Name = "Mental Health"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a0c434f-b4b8-4342-a991-b343f2b0ee3d"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            CCCD = "123456789012",
                            CreatedAt = new DateTime(2025, 2, 5, 21, 5, 4, 673, DateTimeKind.Local).AddTicks(9163),
                            DateOfBirth = new DateOnly(2002, 1, 23),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAEJUsOkBCEyBLNuLzGELlFMSXqQ56uwXWd9ihtFOcC6skDW0veauuhHHCTHLzUdG/Yg==",
                            RoleId = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Slot", "Slot")
                        .WithOne("Appointment")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Appointment", "SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Tag", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Fetus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Fetus", "Fetus")
                        .WithMany("FetusHealths")
                        .HasForeignKey("FetusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fetus");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Slots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Subscription", "Subscription")
                        .WithOne("Transaction")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Transaction", "SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Navigation("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Fetus");

                    b.Navigation("Likes");

                    b.Navigation("Subscriptions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
