// <auto-generated />
using System;
using MaternityCare_Backend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaternityCare_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250201181533_AddSeedingDataForReminder")]
    partial class AddSeedingDataForReminder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LamVietTrung.jpg",
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 37, DateTimeKind.Local).AddTicks(320),
                            Email = "lamviettrung@gmail.com",
                            FullName = "Lam Viet Trung",
                            IsDeleted = false,
                            PhoneNumber = "0457009809",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 5.0
                        },
                        new
                        {
                            Id = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/LeThiMinhHong.jpg",
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 37, DateTimeKind.Local).AddTicks(336),
                            Email = "lethiminhhong@gmail.com",
                            FullName = "Le Thi Minh Hong",
                            IsDeleted = false,
                            PhoneNumber = "0862605697",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 3.0
                        },
                        new
                        {
                            Id = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/NguyenThiThuHa.jpg",
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 37, DateTimeKind.Local).AddTicks(339),
                            Email = "nguyenthithuha@gmail.com",
                            FullName = "Nguyen Thi Thu Ha",
                            IsDeleted = false,
                            PhoneNumber = "0137746881",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 7.0
                        },
                        new
                        {
                            Id = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            Avatar = "https://maternitycare.blob.core.windows.net/maternitycare/VoDucHieu.jpg",
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 37, DateTimeKind.Local).AddTicks(341),
                            Email = "voduchieu@gmail.com",
                            FullName = "Vo Duc Hieu",
                            IsDeleted = false,
                            PhoneNumber = "0754559328",
                            Specialization = "Obstetrician",
                            YearsOfExperience = 8.0
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("ConceptionDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fetuses");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<double?>("AmnioticFluidLevel")
                        .HasColumnType("float");

                    b.Property<double?>("BiparietalDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("CrownRumpLength")
                        .HasColumnType("float");

                    b.Property<double?>("EstimatedFetalWeight")
                        .HasColumnType("float");

                    b.Property<double?>("FemurLength")
                        .HasColumnType("float");

                    b.Property<Guid>("FetusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("GestationalSacDiameter")
                        .HasColumnType("float");

                    b.Property<double?>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FetusId");

                    b.ToTable("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("595a4777-de2b-4c8a-a45f-3ddba55dddee"),
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 38, DateTimeKind.Local).AddTicks(1059),
                            Duration = 10.0,
                            Feature = "Like and comment blogs;Update fetus health record",
                            IsDeleted = false,
                            Price = 0.0,
                            Type = "Free"
                        },
                        new
                        {
                            Id = new Guid("e401f557-307a-4b1d-b65b-d7c26f3aac61"),
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 38, DateTimeKind.Local).AddTicks(1066),
                            Duration = 10.0,
                            Feature = "All the free features;Generate chart;Book doctor in advance",
                            IsDeleted = false,
                            Price = 200000.0,
                            Type = "Premium"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reminders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5a1bd63-2248-483b-ba9a-c881b9475cbf"),
                            Description = "You should have your first prenatal visit and have an ultrasound or blood tests to confirm the pregnancy.",
                            Week = 5
                        },
                        new
                        {
                            Id = new Guid("4e4a6f65-d4dc-4de3-8a1b-ff15dfe033cb"),
                            Description = "You should have your first-trimester screening to check for chromosomal conditions.",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("57512c5b-c834-4372-a5e5-175df37448a9"),
                            Description = "This is the beginning of the second trimester. A routine check-up is a must to check if the pregnancy is progressing normally",
                            Week = 13
                        },
                        new
                        {
                            Id = new Guid("f2433255-014f-4616-aeba-475b968f81fc"),
                            Description = "You should have an anomaly scan to examine fetal anatomy.",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("79762f11-9e00-445d-a0af-7a75a2cb4216"),
                            Description = "You should have the mid-pregnancy ultrasound to check the baby’s development.",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("64b0a5ce-1eb1-4beb-9636-c861e3b7339e"),
                            Description = "This is the beginning of the third trimester. You should have schedule for additional tests or screenings (such as for anemia or gestational diabetes)",
                            Week = 25
                        },
                        new
                        {
                            Id = new Guid("19dbf6e8-314e-43aa-9437-63983f3eaaa3"),
                            Description = "From now on, you have schedule an appointment with your doctor once a week to make sure the baby is developing weel.",
                            Week = 31
                        },
                        new
                        {
                            Id = new Guid("d0557a11-3716-4d9e-aee4-e93f7237d57c"),
                            Description = "You’re now considered early term. You should have regular monitoring.",
                            Week = 37
                        },
                        new
                        {
                            Id = new Guid("4d993f6b-c245-43d8-a50f-6014f4cc033e"),
                            Description = "You’re now considered full term. You should attend all scheduled prenatal appointments and contact your provider if you experience any changes or discomfort.",
                            Week = 39
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("416b6528-8c94-4ddc-8413-012b8ee38ae4"),
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4819e460-8207-4485-9321-ae9c531cb93a"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("baf444ea-57f5-4c78-bf65-22c8eefa7605"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("6042cee0-d2b3-44c9-bdef-477adcbbc687"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("62ff8e34-cc71-473c-b0f3-0d9ac82d8821"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("6b44a187-977d-45c0-b6ac-80a3db63e351"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("909cf4ce-8040-47e9-aa1f-d656a3d3e7a8"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("1af38327-b99b-4aca-b019-ee7d46032145"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c44598e6-9ff4-49fd-8b0d-668fb39bb979"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("80ef66a6-7cb0-4622-ad43-23f2db84a3fa"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("58489679-4e3d-4c16-aab0-2404890fed6b"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("05d6aea8-6898-4cda-9545-b3848d601566"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("da722ed9-154b-4090-8457-98bcaf4b2d63"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("d43d2dd7-d3db-493c-a1d9-7cee8db66f08"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("da3122fa-6804-4acf-b6ac-bccf60010f77"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e8619708-910e-4ddb-90fd-6e963a3fb594"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("09428344-3de3-4828-951b-26389e20357d"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("1f498837-82e7-4901-b4d6-4810f4aa1785"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("182631e6-7853-4622-93eb-b5714495585a"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3d9dbc29-9db7-42f8-b1c0-17fbe6805d29"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e5373175-681f-40f5-8de8-c3ac40d3b563"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3c4bc1b1-cf41-4917-bfad-13ae7d4a0fae"),
                            Date = new DateOnly(2025, 3, 31),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("08883438-39c6-4721-9778-cf06fa086795"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("225b73ae-4e2c-459a-bf92-7bf8822a0fae"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("dd4b7081-e252-43b8-8b53-329e419ac997"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("cb51d20d-6a6f-40aa-886b-3fff2fce5e6d"),
                            Date = new DateOnly(2025, 4, 3),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("31aa1901-9498-4b0b-884d-da8b50c7d693"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1d41aed2-276c-4d9e-8f6e-fecbbdd316d6"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("10567af9-704a-40c8-b088-a8fa875ac127"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6911bd65-4ffd-4217-a00d-8d7e26222bcf"),
                            Date = new DateOnly(2025, 4, 7),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("9d0d5a8c-6675-4a6c-b70c-b5b15242e86b"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2b8f76b0-98ae-487a-9200-5a95e90898f7"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("aa67da00-04a4-4162-8a77-a2cb1dd87d96"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9adb9fbf-a286-45dc-96c8-cd8ef5bfe70c"),
                            Date = new DateOnly(2025, 4, 10),
                            DoctorId = new Guid("7983bd2f-20c4-4d9b-89bd-b5099c704286"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("7efd41b7-ef54-477e-b656-73902d45ec43"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("cfdc39f8-2c98-46b6-b2c2-d98f9cf3b78b"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("8c8a13fd-4b5f-42af-8856-bbc542f0ba4f"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4e371d4b-c24c-4ce4-8f04-31a597a1792a"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("aa72c888-4e7c-4e5e-8fd2-6e6b360f0311"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3b399e00-b7f8-4eaf-b6b9-3681d1731dcc"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("b5944087-2877-4fd4-a8b7-722ff10fbaed"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("55c54e2e-9abe-4d3d-8e59-b2cc9a5eff33"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("e651bed9-9a16-47b1-a8c1-50981fe42074"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("57848cfe-d142-4d45-84c2-f5887634fa27"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("a7a737dd-f990-429c-9664-8fb150de600e"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("29533c71-d065-4406-bb8f-ad544f5f40f1"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("932393b6-e6ed-4439-b78d-fa2d3a0d147c"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2e739a77-5c51-456f-8779-a63f63e85080"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("3f25f304-a0e3-4120-81cd-cd6df6015595"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("184ecdc3-4e9d-4129-a8b6-32c4596d6815"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("39dce4a1-f917-4d8b-bde6-9994c1bb8a94"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4e14281a-92e3-4ff7-81b6-3d63de6edf2f"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8b93c690-d85e-4bf4-8ef1-c054549dd7ac"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("7ffa0b70-7b8d-4468-95e7-67c82263d93d"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("78455f60-7cbd-4568-89be-66ee5682995a"),
                            Date = new DateOnly(2025, 4, 1),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("afef9014-3205-4bc4-9908-581a5e2df9e1"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5849f99a-1406-49aa-9768-4797e808c70d"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("08f9cb59-a27c-4df5-bcc2-8fa33d6deb95"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("50175865-7386-4a8a-9977-b5f819226423"),
                            Date = new DateOnly(2025, 4, 4),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("c3c6c1de-8ac2-4928-bcc3-67d2bbb11678"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b8166a44-e397-4c26-8211-81cec5f60588"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("585e3e0f-e5af-40f1-a8d1-7265a4b78ff9"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("63a04f7d-7a45-45ea-b6fb-fb4baeab33dc"),
                            Date = new DateOnly(2025, 4, 8),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("4f208928-edac-45c4-ad58-3e7f4091f485"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(10, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9ee559fa-28a1-466d-a9db-188487375cf9"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(11, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = new Guid("969acb5a-915d-4596-b2bc-5c73677bab94"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(13, 30, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ccb4ae19-318e-4320-be7d-6fdc216aa10b"),
                            Date = new DateOnly(2025, 4, 11),
                            DoctorId = new Guid("91d4bcac-44fe-4959-bb87-75e0865e4f8c"),
                            EndTime = new TimeOnly(14, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeOnly(13, 30, 0)
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.StandardFetusHealth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbdominalCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmnioticFluidLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BiparietalDiameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrownRumpLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatedFetalWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FemurLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GestationalSacDiameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StandardFetusHealths");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c3bb823-e709-4f6d-85a3-ac8f359ba96c"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "4-9",
                            GestationalSacDiameter = "14-25",
                            Week = 6
                        },
                        new
                        {
                            Id = new Guid("908557b0-79f0-4589-b777-22ac1a8d2287"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "9-14",
                            GestationalSacDiameter = "18-30",
                            Week = 7
                        },
                        new
                        {
                            Id = new Guid("abcd440a-b53f-40dd-adf1-dfb19ab90334"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "14-22",
                            GestationalSacDiameter = "25-35",
                            Week = 8
                        },
                        new
                        {
                            Id = new Guid("cf227df1-6b8d-4d0e-9a3f-9ccbf2c16c67"),
                            AmnioticFluidLevel = "2-3",
                            CrownRumpLength = "22-31",
                            GestationalSacDiameter = "28-36",
                            Week = 9
                        },
                        new
                        {
                            Id = new Guid("423c7b5a-6b57-44fc-9fd4-44d4c4c3de7c"),
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "15-22",
                            CrownRumpLength = "31-40",
                            EstimatedFetalWeight = "5-8",
                            FemurLength = "7-9",
                            GestationalSacDiameter = "30-40",
                            HeadCircumference = "56-78",
                            Week = 10
                        },
                        new
                        {
                            Id = new Guid("f3e77cfc-ac6d-432f-b91a-ce99b48fb0a9"),
                            AbdominalCircumference = "50-65",
                            AmnioticFluidLevel = "2-3",
                            BiparietalDiameter = "21-24",
                            CrownRumpLength = "50-60",
                            EstimatedFetalWeight = "14-19",
                            FemurLength = "9-12",
                            GestationalSacDiameter = "40-50",
                            HeadCircumference = "70-85",
                            Week = 12
                        },
                        new
                        {
                            Id = new Guid("c4cb6782-0604-40f3-acd2-f549c84d5d59"),
                            AbdominalCircumference = "70-85",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "24-30",
                            CrownRumpLength = "78-85",
                            EstimatedFetalWeight = "40-60",
                            FemurLength = "14-17",
                            HeadCircumference = "90-110",
                            Week = 14
                        },
                        new
                        {
                            Id = new Guid("f2bc1cda-aa5b-4eab-8989-87322e8f4e54"),
                            AbdominalCircumference = "90-110",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "32-38",
                            EstimatedFetalWeight = "100-150",
                            FemurLength = "18-22",
                            HeadCircumference = "110-130",
                            Week = 16
                        },
                        new
                        {
                            Id = new Guid("37d279b6-ebb4-40e7-a7c2-c498dca19ff6"),
                            AbdominalCircumference = "110-130",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "38-45",
                            EstimatedFetalWeight = "190-220",
                            FemurLength = "22-27",
                            HeadCircumference = "130-150",
                            Week = 18
                        },
                        new
                        {
                            Id = new Guid("70bbae7e-8e04-4cda-8ef8-8faeeb2e7336"),
                            AbdominalCircumference = "125-155",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "45-50",
                            EstimatedFetalWeight = "260-300",
                            FemurLength = "30-34",
                            HeadCircumference = "150-170",
                            Week = 20
                        },
                        new
                        {
                            Id = new Guid("dbae4eee-6d83-4187-a745-2ddac8a6a04f"),
                            AbdominalCircumference = "150-180",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "50-55",
                            EstimatedFetalWeight = "350-420",
                            FemurLength = "34-38",
                            HeadCircumference = "170-190",
                            Week = 22
                        },
                        new
                        {
                            Id = new Guid("4823aa48-66fc-48e8-9349-29d7e0df1b45"),
                            AbdominalCircumference = "170-200",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "55-60",
                            EstimatedFetalWeight = "500-600",
                            FemurLength = "38-42",
                            HeadCircumference = "190-210",
                            Week = 24
                        },
                        new
                        {
                            Id = new Guid("39fa548e-6309-404c-a58b-86f43a477fde"),
                            AbdominalCircumference = "190-220",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "60-65",
                            EstimatedFetalWeight = "750-850",
                            FemurLength = "42-47",
                            HeadCircumference = "210-230",
                            Week = 26
                        },
                        new
                        {
                            Id = new Guid("e0a77452-c144-4934-b19b-401b52b3c6e7"),
                            AbdominalCircumference = "210-250",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "65-70",
                            EstimatedFetalWeight = "1000-1200",
                            FemurLength = "47-52",
                            HeadCircumference = "230-250",
                            Week = 28
                        },
                        new
                        {
                            Id = new Guid("f4210f50-591f-413e-83d6-b30d7e08c573"),
                            AbdominalCircumference = "230-270",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "70-75",
                            EstimatedFetalWeight = "1400-1600",
                            FemurLength = "52-56",
                            HeadCircumference = "250-270",
                            Week = 30
                        },
                        new
                        {
                            Id = new Guid("553f421d-e773-4468-a1be-6f313a988536"),
                            AbdominalCircumference = "250-290",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "75-80",
                            EstimatedFetalWeight = "1700-2000",
                            FemurLength = "56-60",
                            HeadCircumference = "270-290",
                            Week = 32
                        },
                        new
                        {
                            Id = new Guid("2049665f-6f5a-49e5-a3b8-29e804c0b691"),
                            AbdominalCircumference = "270-310",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "80-85",
                            EstimatedFetalWeight = "2100-2500",
                            FemurLength = "60-65",
                            HeadCircumference = "290-310",
                            Week = 34
                        },
                        new
                        {
                            Id = new Guid("bdfcab46-ca59-4d76-8458-54c5d91470ff"),
                            AbdominalCircumference = "290-330",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "85-90",
                            EstimatedFetalWeight = "2500-2900",
                            FemurLength = "65-70",
                            HeadCircumference = "310-330",
                            Week = 36
                        },
                        new
                        {
                            Id = new Guid("740ff222-a6aa-4766-9e2d-7d99c42fc7ab"),
                            AbdominalCircumference = "310-350",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "90-95",
                            EstimatedFetalWeight = "2900-3200",
                            FemurLength = "70-75",
                            HeadCircumference = "330-350",
                            Week = 38
                        },
                        new
                        {
                            Id = new Guid("cb1223f7-a6ea-467b-a169-c36de4c07ef0"),
                            AbdominalCircumference = "320-360",
                            AmnioticFluidLevel = "2-8",
                            BiparietalDiameter = "95-100",
                            EstimatedFetalWeight = "3200-3500",
                            FemurLength = "75-80",
                            HeadCircumference = "350-370",
                            Week = 40
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5aefed2-5df7-4d2f-bec4-7932da2849de"),
                            Name = "Baby"
                        },
                        new
                        {
                            Id = new Guid("d1a17f1e-eb54-43bc-bdac-ca1873c99362"),
                            Name = "Pregnancy"
                        },
                        new
                        {
                            Id = new Guid("05ac02ec-3fd0-47ad-ab14-4a969bec6e3d"),
                            Name = "Parenting"
                        },
                        new
                        {
                            Id = new Guid("7c8d65a1-ae9a-4717-8ef0-012a1f0384dd"),
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("bc557eef-49f8-4bca-8f0a-9700b8c13e7e"),
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = new Guid("8e18a540-ce22-46d3-ba7b-cde9d20dca38"),
                            Name = "Exercise"
                        },
                        new
                        {
                            Id = new Guid("3185dbf9-c4be-4c0e-b8e6-4d9ee47bb296"),
                            Name = "Mental Health"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a0c434f-b4b8-4342-a991-b343f2b0ee3d"),
                            Avatar = "https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?k=6&m=1223671392&s=170667a&w=0&h=zP3l7WJinOFaGb2i1F4g8IS2ylw0FlIaa6x3tP9sebU=",
                            CCCD = "123456789012",
                            CreatedAt = new DateTime(2025, 2, 2, 1, 15, 33, 39, DateTimeKind.Local).AddTicks(8494),
                            DateOfBirth = new DateOnly(2002, 1, 23),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "AQAAAAIAAYagAAAAELTq8jNcUASsgkIy6YxRzS+PEEuKsjHmRlGnGY0FInCiE8ak1vIWR0BU45on21W9eg==",
                            RoleId = new Guid("825fe2a6-c543-49cb-9d84-1f8cf2864047"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Slot", "Slot")
                        .WithOne("Appointment")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Appointment", "SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Tag", "Tag")
                        .WithMany("Blogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Fetus")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.FetusHealth", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Fetus", "Fetus")
                        .WithMany("FetusHealths")
                        .HasForeignKey("FetusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fetus");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Like", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Blog", "Blog")
                        .WithMany("Likes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Slots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Package", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Subscription", "Subscription")
                        .WithOne("Transaction")
                        .HasForeignKey("MaternityCare_Backend.Domain.Entities.Transaction", "SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MaternityCare_Backend.Domain.Entities.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.HasOne("MaternityCare_Backend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Fetus", b =>
                {
                    b.Navigation("FetusHealths");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Package", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Subscription", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MaternityCare_Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Fetus");

                    b.Navigation("Likes");

                    b.Navigation("Subscriptions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
